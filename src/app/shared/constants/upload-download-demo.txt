//scrtip create images path:
node generate-img-path.js

<-----------css--------------->
.flipbook {
  position: absolute;
  top: 10%;
  width: 50%;
  left: 50%;
}

.flip-panel {
  position: relative;
  width: 70%;
  height: 80svh;
  perspective: 1200px;
}

.content {
  width: 100%;
  height: 100%;
}

.content img {
  width: 100%;
  height: 100%;
  object-fit: fill;
  border-radius: 15px;
  box-shadow: 0 2px 8px rgba(127, 127, 127, 0.732);
  cursor: pointer;
  z-index: 100;
}

.panel {
  transition: z-index 1s ease-in-out 1s;
}

.panel,
.panel .front,
.panel .back {
  position: absolute;
  display: block;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 15px;

  -moz-transform-style: preserve-3d;
  -moz-transition: -moz-transform 1s;
  transform-style: preserve-3d;
  transition: transform 1s;
}

.panel .front {
  z-index: 2;
  -moz-transform: rotateY(0deg);
  -moz-transform-origin: left;
  transform: rotateY(0deg);
  transform-origin: left;
  backface-visibility: hidden;
}

.panel .back {
  left: -100%;
  z-index: 1;
  -moz-transform: rotateY(180deg);
  -moz-transform-origin: right;
  transform: rotateY(180deg);
  transform-origin: right;
  backface-visibility: hidden;
}

.panel .front:hover {
  -moz-transform: rotateY(-25deg);
  -moz-transform-origin: left;
  transform: rotateY(-25deg);
  transform-origin: left;
}

.panel.open {
  z-index: 1;
}

.panel.open .front {
  z-index: 1;
  -moz-transform: rotateY(-180deg);
  -moz-transform-origin: left;
  transform: rotateY(-180deg);
  transform-origin: left;
}

.panel.open .back {
  z-index: 2;
  -moz-transform: rotateY(0deg);
  -moz-transform-origin: right;
  transform: rotateY(0deg);
  transform-origin: right;
}

.fold,
.fold1 {
  width: 0px;
  height: 0px;
  position: absolute;
  top: 0px;
  right: 0px;
  border-width: 0;
  border-style: solid;
  background: #72cbd1;
  display: block;
  /*border-radius:3px 0 0 0;*/
  border-color: transparent #fff transparent #fff;

  -webkit-transition: border-width 0.2s ease-out;
  -moz-transition: border-width 0.2s ease-out;
  -ms-transition: border-width 0.2s ease-out;
  -o-transition: border-width 0.2s ease-out;
  transition: border-width 0.2s ease-out;
}

.fold1 {
  left: 0;
}

.content:hover .fold {
  border-width: 0px 30px 30px 0px;
}

.content:hover .fold1 {
  border-width: 0px 0px 30px 30px;
}


<-------------html------------------------>
<div class="container" style="display: flex">
  <div class="list-file">
    <h2>File Manager</h2>
    <!-- <input type="file" (change)="onFileSelected($event)" /> -->
    <button (click)="onUploadFile()">ThÃªm file</button>
    <button (click)="listFiles()">List Files</button>
    <ul>
      <li *ngFor="let file of files">
        <a [href]="file.url" download target="_blank"
          ><img
            style="width: 20px; height: 25px"
            src="icons/download.png"
            alt="download"
        /></a>
        <img
          style="width: 20px; height: 25px"
          [src]="getFileType(file.name)"
          alt="file type"
        />

        <span (click)="viewFile(file.name)">{{ file.name.split(".")[0] }}</span>
      </li>
    </ul>
  </div>
</div>
<div class="flipbook" id="flipbook">
  <div class="flip-panel">
    <ng-container *ngFor="let item of content; let i = index">
      <div class="panel" #panelRef>
        <div class="front">
          <div class="content">
            <span class="fold"></span>
            <img [src]="item.front" alt="" />
          </div>
        </div>

        <div class="back">
          <div class="content">
            <span class="fold1"></span>
            <img [src]="item.back" alt="" />
          </div>
        </div>
      </div>
    </ng-container>
  </div>
</div>


<----------------ts-------------------->
import {
  AfterViewInit,
  ChangeDetectorRef,
  Component,
  ElementRef,
  OnInit,
  QueryList,
  ViewChildren,
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FileData, FileService } from '../../services/file.service';
import { CommonModule } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import Constant from '../../components/constants/Constant';

@Component({
  selector: 'app-paragraph',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './paragraph.component.html',
  styleUrl: './paragraph.component.css',
})
export class ParagraphComponent implements OnInit, AfterViewInit {
  path: string = '';

  uploadProgress: number | undefined;
  files: FileData[] = [];
  downloadUrl: string | undefined;
  isUploadFile: boolean = false;

  listImagePaths: any[] = [];
  constructor(
    private route: ActivatedRoute,
    private fileService: FileService,
    private cdr: ChangeDetectorRef,
    private http: HttpClient
  ) {}

  ngOnInit(): void {
    this.route.pathFromRoot.forEach((route) => {
      route.url.subscribe((urlSegment) => {
        this.path += urlSegment.map((segment) => segment.path).join('/');

        this.listFiles();
      });
    });

    this.listImagePaths = Constant.IMAGE_PATHS.images;
  }

  // List files
  listFiles(): void {
    this.files = [];
    this.fileService.getFilesList(this.path).subscribe((files) => {
      files.forEach((file: any) => {
        this.files.push(file);
      });
    });
  }

  // Download file
  downloadFile(fileName: string): void {
    const filePath = `${this.path}/${fileName}`;
    this.fileService.getFileUrl(filePath).subscribe((url) => {
      this.downloadUrl = url;
      window.open(url, '_blank');
    });
  }

  getFileType(fileName: string) {
    if (fileName.includes('.pdf')) {
      return 'icons/pdf.png';
    } else if (fileName.includes('.docx') || fileName.includes('.doc')) {
      return 'icons/word.png';
    } else if (fileName.includes('.ppt')) {
      return 'icons/ppt.png';
    } else {
      return null;
    }
  }

  onUploadFile() {
    setTimeout(() => {
      this.isUploadFile = !this.isUploadFile;
      this.cdr.detectChanges();
    }, 0);
  }

  content: any[] = [];

  sortImagePathsByNumber(paths: string[]) {
    paths.sort((a, b) => {
      const numA = this.extractNumber(a);
      const numB = this.extractNumber(b);
      return numA - numB;
    });
  }

  extractNumber(path: string): number {
    const regex = /-images-(\d+)\.jpg$/;
    const match = path.match(regex);
    return match ? parseInt(match[1], 10) : 0;
  }

  viewFile(fileName: string) {
    let path = `${this.path}/${fileName?.split('.')[0]}`;
    let imgPaths = this.listImagePaths.filter((x) => x.includes(path));
    this.sortImagePathsByNumber(imgPaths);

    for (let i = 0; i < imgPaths.length; i += 2) {
      let item = {
        front: imgPaths[i].split('public/')[1],
        back:
          i + 1 >= imgPaths.length
            ? '/assets/imgs/last-page.png'
            : imgPaths[i + 1].split('public/')[1],
      };
      this.content.push(item);
    }
  }

  @ViewChildren('panelRef') panels: QueryList<ElementRef> =
    new QueryList<ElementRef>();
  ngAfterViewInit(): void {
    this.panels.changes.subscribe(() => {
      // This code will run when the QueryList is updated
      const panelElements: ElementRef[] = this.panels.toArray();

      // You can now access the panel elements and work with them
      const panels: HTMLElement[] = Array.from(
        document.querySelectorAll('.panel')
      );
      const numPanels: number = panels.length;

      // if a panel is open, lower its z-idx
      // otherwise, set zIdx back to the original
      function checkZ(aPanel: HTMLElement) {
        if (aPanel.classList.contains('open')) {
          setTimeout(() => {
            aPanel.style.zIndex = '1';
          }, 800);
        } else {
          // set z-index back to original stored in data
          const zIdx = Number(aPanel.dataset['zIdx']);
          aPanel.style.zIndex = zIdx.toString();
        }
      }

      // loop through all panels and reverse sort via zIdx
      panels.forEach((panel, i) => {
        const zIdx: number = numPanels - i; // Specify the type of zIdx
        panel.style.zIndex = zIdx.toString();
        panel.dataset['zIdx'] = zIdx.toString();
      });

      const imgs: HTMLElement[] = Array.from(
        document.querySelectorAll('.panel img')
      );

      imgs.forEach((img) => {
        img.addEventListener('click', (event) => {
          const target = img.parentElement?.parentElement as HTMLElement;
          const panel = target.closest('.panel') as HTMLElement;
          if (panel) {
            if (
              target.classList.contains('front') ||
              target.classList.contains('back')
            ) {
              panel.classList.toggle('open');
              checkZ(panel);
            }
          }
          event.stopPropagation();
        });
      });
    });
  }
}
